apiVersion: v1
data:
  .bashrc: "# ~/.bashrc: executed by bash(1) for non-login shells.\n# see /usr/share/doc/bash/examples/startup-files
    (in the package bash-doc)\n# for examples\n\n# If not running interactively, don't
    do anything\n[ -z \"$PS1\" ] && return\n\n# don't put duplicate lines in the history.
    See bash(1) for more options\n# ... or force ignoredups and ignorespace\nHISTCONTROL=ignoredups:ignorespace\n\n#
    append to the history file, don't overwrite it\nshopt -s histappend\n\n# for setting
    history length see HISTSIZE and HISTFILESIZE in bash(1)\nHISTSIZE=1000\nHISTFILESIZE=2000\n\n#
    check the window size after each command and, if necessary,\n# update the values
    of LINES and COLUMNS.\nshopt -s checkwinsize\n\n# make less more friendly for
    non-text input files, see lesspipe(1)\n[ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh
    lesspipe)\"\n\n# set variable identifying the chroot you work in (used in the
    prompt below)\nif [ -z \"$debian_chroot\" ] && [ -r /etc/debian_chroot ]; then\n
    \   debian_chroot=$(cat /etc/debian_chroot)\nfi\n\n# set a fancy prompt (non-color,
    unless we know we \"want\" color)\ncase \"$TERM\" in\n    xterm-color) color_prompt=yes;;\nesac\n\n#
    uncomment for a colored prompt, if the terminal has the capability; turned\n#
    off by default to not distract the user: the focus in a terminal window\n# should
    be on the output of commands, not on the prompt\n#force_color_prompt=yes\n\nif
    [ -n \"$force_color_prompt\" ]; then\n    if [ -x /usr/bin/tput ] && tput setaf
    1 >&/dev/null; then\n\t# We have color support; assume it's compliant with Ecma-48\n\t#
    (ISO/IEC-6429). (Lack of such support is extremely rare, and such\n\t# a case
    would tend to support setf rather than setaf.)\n\tcolor_prompt=yes\n    else\n\tcolor_prompt=\n
    \   fi\nfi\n\nif [ \"$color_prompt\" = yes ]; then\n    PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$
    '\nelse\n    PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ '\nfi\nunset
    color_prompt force_color_prompt\n\n# If this is an xterm set the title to user@host:dir\ncase
    \"$TERM\" in\nxterm*|rxvt*)\n    PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h:
    \\w\\a\\]$PS1\"\n    ;;\n*)\n    ;;\nesac\n\n# enable color support of ls and
    also add handy aliases\nif [ -x /usr/bin/dircolors ]; then\n    test -r ~/.dircolors
    && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\n    alias
    ls='ls --color=auto'\n    #alias dir='dir --color=auto'\n    #alias vdir='vdir
    --color=auto'\n\n    alias grep='grep --color=auto'\n    alias fgrep='fgrep --color=auto'\n
    \   alias egrep='egrep --color=auto'\nfi\n\n# some more ls aliases\nalias ll='ls
    -alF'\nalias la='ls -A'\nalias l='ls -CF'\n\n# Alias definitions.\n# You may want
    to put all your additions into a separate file like\n# ~/.bash_aliases, instead
    of adding them here directly.\n# See /usr/share/doc/bash-doc/examples in the bash-doc
    package.\n\nif [ -f ~/.bash_aliases ]; then\n    . ~/.bash_aliases\nfi\n\n# enable
    programmable completion features (you don't need to enable\n# this, if it's already
    enabled in /etc/bash.bashrc and /etc/profile\n# sources /etc/bash.bashrc).\n#if
    [ -f /etc/bash_completion ] && ! shopt -oq posix; then\n#    . /etc/bash_completion\n#fi\nexport
    PS1=\"$ \"\nalias python3=/usr/bin/python3.8\nexport PS1=\"\\[\e]0;\\u@\\h: \\w\a\\]\\H
    $ \"\nalias k=kubectl\n. /etc/bash_completion\nfunction ccat() { docker run -it
    -v \"$(pwd)\":/workdir -w /workdir whalebrew/pygmentize:2.6.1 $@; }\n"
  .curlrc: |
    -s
  .hushlogin: ""
  .profile: |
    # ~/.profile: executed by Bourne-compatible login shells.

    if [ "$BASH" ]; then
      if [ -f ~/.bashrc ]; then
        . ~/.bashrc
      fi
    fi

    mesg n || true
  .viminfo: "# This viminfo file was generated by Vim 8.0.\n# You may edit it if you're
    careful!\n\n# Viminfo version\n|1,4\n\n# Value of 'encoding' when this file was
    written\n*encoding=utf-8\n\n\n# hlsearch on (H) or off (h):\n~h\n# Command Line
    History (newest to oldest):\n:wq\n|2,0,1597830282,,\"wq\"\n\n# Search String History
    (newest to oldest):\n\n# Expression History (newest to oldest):\n\n# Input Line
    History (newest to oldest):\n\n# Debug Line History (newest to oldest):\n\n# Registers:\n\n#
    File marks:\n'0  16  2  ~/nginx-pod.yml\n|4,48,16,2,1597830282,\"~/nginx-pod.yml\"\n'1
    \ 2  10  ~/config.txt\n|4,49,2,10,1597830034,\"~/config.txt\"\n\n# Jumplist (newest
    first):\n-'  16  2  ~/nginx-pod.yml\n|4,39,16,2,1597830282,\"~/nginx-pod.yml\"\n-'
    \ 1  0  ~/nginx-pod.yml\n|4,39,1,0,1597830113,\"~/nginx-pod.yml\"\n-'  2  10  ~/config.txt\n|4,39,2,10,1597830034,\"~/config.txt\"\n-'
    \ 2  10  ~/config.txt\n|4,39,2,10,1597830034,\"~/config.txt\"\n-'  1  0  ~/config.txt\n|4,39,1,0,1597830029,\"~/config.txt\"\n-'
    \ 1  0  ~/config.txt\n|4,39,1,0,1597830029,\"~/config.txt\"\n\n# History of marks
    within files (newest to oldest):\n\n> ~/nginx-pod.yml\n\t*\t15978
  config.txt: |
    key1=value1
    key2=value2
  configmap.yaml: ""
  nginx-pod.yml: |
    apiVersion: v1
    kind: Pod
    metadata:
      creationTimestamp: null
      labels:
        run: nginx
      name: nginx
    spec:
      containers:
      - image: nginx
        name: nginx
        resources: {}
        env:
          - name: KEY_VALUES
            valueFrom:
      dnsPolicy: ClusterFirst
      restartPolicy: Never
    status: {}
  nginx.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx-two-deployment
    spec:
      selector:
        matchLabels:
          app: nginx-two
      replicas: 3
      template:
        metadata:
          labels:
            app: nginx-two
        spec:
          containers:
          - name: nginx-two
            image: nginx:1.17-alpine
            ports:
            - containerPort: 80
              name: nginx-pod-port
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: nginx-two
      labels:
        app: nginx-two
    spec:
      type: NodePort
      ports:
      - port: 80
        targetPort: nginx-pod-port
        nodePort: 31112
        protocol: TCP
      selector:
        app: nginx-two
kind: ConfigMap
metadata:
  creationTimestamp: "2020-08-19T09:49:15Z"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:.bashrc: {}
        f:.curlrc: {}
        f:.hushlogin: {}
        f:.profile: {}
        f:.viminfo: {}
        f:.vimrc: {}
        f:config.txt: {}
        f:configmap.yaml: {}
        f:nginx-pod.yml: {}
        f:nginx.yaml: {}
    manager: kubectl
    operation: Update
    time: "2020-08-19T09:49:15Z"
  name: keyvalcfgmap
  namespace: default
  resourceVersion: "1930"
  selfLink: /api/v1/namespaces/default/configmaps/keyvalcfgmap
  uid: 1101771e-1c9d-41d6-b47a-c32cfedd62c2
